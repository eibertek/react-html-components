{
  "name": "React-html-components",
  "tagline": "Generic html react components for materializecss",
  "body": "# react-html-components\r\n## Generic html react components for materializecss\r\n<br />\r\n[![Build\r\nStatus](https://travis-ci.org/mykhailokoretskyi/react-html-components.svg?branch=master)](https://travis-ci.org/react-html-components/react-html-components) [![npm\r\nversion](http://img.shields.io/npm/v/react-html-components.svg?style=flat)](https://npmjs.org/package/react-html-components \"View this project on npm\")\r\n\r\n### Getting started\r\n\r\n#### Install npm package\r\n`npm install --save react-html-components`\r\n\r\n#### Usage\r\n`import {TextInput, Switch} from 'react-html-components';`\r\n\r\n### Supported materialize elements\r\n\r\n1. Form elements\r\n  1. input type text (**TextInput**)\r\n  2. input type email (**EmailInput**)\r\n  3. input type password (**PasswordInput**)\r\n  4. input type radio (**RadioButton**)\r\n  5. input type checkbox (**Checkbox**)\r\n  6. switch (**Switch**)\r\n\r\n## Documentation\r\n\r\n### Form elements\r\n\r\n#### Common attributes\r\n* `name`               - type `string`;\r\n* `value`              - type `string`;\r\n* `id`                 - type `string`;\r\n* `disabled`           - type `boolean`;\r\n* `required`           - type `boolean`;\r\n* `validate`           - type `boolean` (enables materialize`s validation);\r\n* `errorMessage`       - type `string` (`data-error` attribute of `<input/>`);\r\n* `successMessage`     - type `string` (`data-success` attribute of `<input/>`);\r\n* `changeCallback`     - type `function` (executed when input changes value/checked);\r\n* `mouseEnterCallback` - type `function` (executed on hover of `<input/>`);\r\n* `mouseLeaveCallback` - type `function` (executed on mouse leave the `<input/>`)\r\n\r\n#### Methods\r\n\r\nFollowing accessor methods are available through the React\\`s `refs`:\r\n* `value`              - getter/setter (available for all inputs);\r\n* `checked`            - getter/setter (available **ONLY** for *RadioButton*, *Checkbox*, *Switch*; throws an exception if called for other inputs);\r\n\r\n*Example*:\r\n```\r\nsomeMethod(){\r\n  this.refs.textInput.value(\"new value\"); // setter\r\n  this.refs.textInput.value()             // getter\r\n}\r\n.......\r\nrender(){\r\n  return (\r\n    <TextInput ref=\"textInput\" value={this.state.value} />\r\n);\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}